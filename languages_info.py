import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

API_TOKEN = '7270373741:AAGmJ6m_KDMfNiNIdRC198L91S_SkTHLeBg'
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

languages = {
    'Python': {
        'description': '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–¥–∏–≥–º.',
        'resources': [
            'https://docs.python.org/3/',
            'https://realpython.com/',
            'https://www.python.org/doc/'
        ],
    },
    'JavaScript': {
        'description': '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–Ω—ã—Ö –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü.',
        'resources': [
            'https://developer.mozilla.org/ru/docs/Web/JavaScript',
            'https://javascript.info/',
            'https://www.ecma-international.org/publications-and-standards/standards/ecma-262/'
        ],
    },
    'Java': {
        'description': '–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –æ—Ç –º–æ–±–∏–ª—å–Ω—ã—Ö –¥–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö.',
        'resources': [
            'https://docs.oracle.com/en/java/',
            'https://www.javatpoint.com/java-tutorial',
            'https://www.java.com/en/docs/'
        ],
    },
    'C++': {
        'description': '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.',
        'resources': [
            'https://en.cppreference.com/w/',
            'https://www.learncpp.com/',
            'https://www.cplusplus.com/doc/tutorial/'
        ],
    },
    'Ruby': {
        'description': '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.',
        'resources': [
            'https://www.ruby-lang.org/en/documentation/',
            'https://www.learnrubythehardway.org/',
            'https://ruby-doc.org/'
        ],
    },
    'PHP': {
        'description': '–°–∫—Ä–∏–ø—Ç–æ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.',
        'resources': [
            'https://www.php.net/docs.php',
            'https://www.learn-php.org/',
            'https://www.phptherightway.com/'
        ],
    },
    'Go': {
        'description': '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —É–¥–æ–±—Å—Ç–≤–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.',
        'resources': [
            'https://golang.org/doc/',
            'https://www.learn-go.org/',
            'https://gobyexample.com/'
        ],
    },
    'Swift': {
        'description': '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç Apple, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è iOS –∏ macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.',
        'resources': [
            'https://developer.apple.com/swift/',
            'https://www.raywenderlich.com/ios/paths/learn-swift',
            'https://www.hackingwithswift.com/'
        ],
    },
    'Kotlin': {
        'description': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å Java, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Android-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.',
        'resources': [
            'https://kotlinlang.org/docs/home.html',
            'https://developer.android.com/kotlin',
            'https://www.baeldung.com/kotlin'
        ],
    },
    'Rust': {
        'description': '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å.',
        'resources': [
            'https://doc.rust-lang.org/book/',
            'https://www.rust-lang.org/learn',
            'https://www.rust-lang.org/learn/get-started'
        ],
    }
}

dp.message(Command("start"))


async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    for lang in languages.keys():
        keyboard.add(InlineKeyboardButton(text=lang, callback_data=lang))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data in languages)
async def handle_language_choice(callback_query: types.CallbackQuery, user_data=None):
    language = callback_query.data
    user_data[callback_query.from_user.id] = language

    info = languages[language]
    description = info["description"]
    resources = "\n".join(info["resources"])

    message_text = f"üìå **{language}**\n\nüìù {description}\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n{resources}"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="continue"))
    keyboard.add(InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language"))

    await callback_query.message.edit_text(message_text, reply_markup=keyboard)


@dp.callback_query(lambda c: c.data == "continue")
async def continue_learning(callback_query: types.CallbackQuery, user_data=None):
    user_id = callback_query.from_user.id
    language = user_data.get(user_id)

    if language:
        await callback_query.message.edit_text(f"–í—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ **{language}**. üöÄ")
    else:
        await callback_query.message.edit_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.")


@dp.callback_query(lambda c: c.data == "change_language")
async def change_language(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    for lang in languages.keys():
        keyboard.add(InlineKeyboardButton(text=lang, callback_data=lang))

    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
