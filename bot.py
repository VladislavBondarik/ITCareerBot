import asyncio
import sqlite3
import json
import aiohttp
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = "7270373741:AAGmJ6m_KDMfNiNIdRC198L91S_SkTHLeBg"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)


class Database:
    def __init__(self, db_name="career_test.db"):
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            answers TEXT,
            specialty TEXT,
            feedback INTEGER DEFAULT 0)''')
        self.conn.commit()

    def save_user(self, user_id, name, answers, specialty):
        self.cursor.execute("INSERT OR REPLACE INTO users (user_id, name, answers, specialty) VALUES (?, ?, ?, ?)",
                           (user_id, name, json.dumps(answers), specialty))
        self.conn.commit()

    def update_feedback(self, user_id, feedback):
        self.cursor.execute("UPDATE users SET feedback = ? WHERE user_id = ?", (feedback, user_id))
        self.conn.commit()

    def get_user(self, user_id):
        self.cursor.execute("SELECT name, answers, specialty FROM users WHERE user_id = ?", (user_id,))
        return self.cursor.fetchone()

    def get_stats(self):
        self.cursor.execute("SELECT COUNT(*) FROM users WHERE feedback = 1")
        likes = self.cursor.fetchone()[0]
        self.cursor.execute("SELECT COUNT(*) FROM users WHERE feedback = -1")
        dislikes = self.cursor.fetchone()[0]
        return likes, dislikes

    def __del__(self):
        self.conn.close()


db = Database()


class CareerTest(StatesGroup):
    question_1 = State()
    question_2 = State()
    question_3 = State()
    question_4 = State()
    question_5 = State()
    question_6 = State()
    question_7 = State()
    question_8 = State()
    question_9 = State()
    question_10 = State()
    question_11 = State()
    question_12 = State()


main_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]], resize_keyboard=True)
keyboard_q2 = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–æ 18")], [KeyboardButton(text="18‚Äì25")], [KeyboardButton(text="26‚Äì35")], [KeyboardButton(text="36+")]], resize_keyboard=True)
keyboard_q3 = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–í—ã—Å–æ–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã")], [KeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º")], [KeyboardButton(text="–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞")], [KeyboardButton(text="–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–æ—Å—Ç–∞")]], resize_keyboard=True)
keyboard_q4 = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")], [KeyboardButton(text="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ (UI)")], [KeyboardButton(text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")], [KeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ DevOps")], [KeyboardButton(text="–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞")], [KeyboardButton(text="–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")]], resize_keyboard=True)
keyboard_q5 = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="Docker, Kubernetes")], [KeyboardButton(text="React, Vue.js")], [KeyboardButton(text="Python, Django")], [KeyboardButton(text="SQL, MongoDB")], [KeyboardButton(text="Flutter, Swift")]], resize_keyboard=True)
keyboard_q6 = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="Python")], [KeyboardButton(text="JavaScript")], [KeyboardButton(text="Java")], [KeyboardButton(text="C++")], [KeyboardButton(text="Go")]], resize_keyboard=True)
keyboard_q7 = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ú–µ–Ω–µ–µ 1 —á–∞—Å–∞")], [KeyboardButton(text="1‚Äì3 —á–∞—Å–∞")], [KeyboardButton(text="3‚Äì5 —á–∞—Å–æ–≤")], [KeyboardButton(text="–ë–æ–ª—å—à–µ 5 —á–∞—Å–æ–≤")]], resize_keyboard=True)
keyboard_q8 = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–µ—Ç, —è –Ω–æ–≤–∏—á–æ–∫")], [KeyboardButton(text="–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è (–∫—É—Ä—Å—ã)")], [KeyboardButton(text="–ï—Å—Ç—å –æ–ø—ã—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")], [KeyboardButton(text="–†–∞–±–æ—Ç–∞–ª –≤ IT")]], resize_keyboard=True)
keyboard_q9 = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–∞—á–∞–ª—å–Ω—ã–π (A1‚ÄìA2)")], [KeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π (B1‚ÄìB2)")], [KeyboardButton(text="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (C1‚ÄìC2)")], [KeyboardButton(text="–ù–µ –∑–Ω–∞—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")]], resize_keyboard=True)
keyboard_q10 = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–í –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")], [KeyboardButton(text="–í –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏")], [KeyboardButton(text="–í —Å—Ñ–µ—Ä–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")], [KeyboardButton(text="–í —Å—Ç–∞—Ä—Ç–∞–ø–µ")], [KeyboardButton(text="–í –∫—Ä—É–ø–Ω–æ–π IT-–∫–æ–º–ø–∞–Ω–∏–∏")]], resize_keyboard=True)
keyboard_q11 = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º")], [KeyboardButton(text="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ UI")], [KeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")], [KeyboardButton(text="–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")]], resize_keyboard=True)
keyboard_q12 = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–†–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –Ω–∞–¥ –±–æ–ª—å—à–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏")], [KeyboardButton(text="–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏")], [KeyboardButton(text="–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ")], [KeyboardButton(text="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å –≥–æ—Ç–æ–≤–æ–µ")]], resize_keyboard=True)


async def get_course_resource(specialty):
    async with aiohttp.ClientSession() as session:
        keyword = specialty.split()[0]
        url = f"https://stepik.org/api/courses?search={keyword}&language=ru"
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                courses = data.get("courses", [])
                if courses:
                    course = courses[0]
                    return f"https://stepik.org/course/{course['id']}"
            return "https://stepik.org/catalog"


@router.message(Command("test"))
@router.message(lambda message: message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def start_test(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(CareerTest.question_1)
    await message.answer("üìü **IT –¢–µ—Å—Ç**\n\n–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é IT-—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.\n\nüí° –í–æ–ø—Ä–æ—Å 1: –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=None)


@router.message(CareerTest.question_1)
async def answer_q1(message: types.Message, state: FSMContext):
    await state.update_data(q1=message.text)
    await state.set_state(CareerTest.question_2)
    await message.answer("üí° –í–æ–ø—Ä–æ—Å 2: –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=keyboard_q2)


@router.message(CareerTest.question_2)
async def answer_q2(message: types.Message, state: FSMContext):
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ": await start_test(message, state); return
    await state.update_data(q2=message.text)
    await state.set_state(CareerTest.question_3)
    await message.answer("üí° –í–æ–ø—Ä–æ—Å 3: –ü–æ—á–µ–º—É —Ç—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è IT?", reply_markup=keyboard_q3)


@router.message(CareerTest.question_3)
async def answer_q3(message: types.Message, state: FSMContext):
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ": await start_test(message, state); return
    await state.update_data(q3=message.text)
    await state.set_state(CareerTest.question_4)
    await message.answer("üí° –í–æ–ø—Ä–æ—Å 4: –ö–∞–∫—É—é —Å—Ñ–µ—Ä—É IT —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –∏–∑—É—á–∞—Ç—å?", reply_markup=keyboard_q4)


@router.message(CareerTest.question_4)
async def answer_q4(message: types.Message, state: FSMContext):
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ": await start_test(message, state); return
    await state.update_data(q4=message.text)
    await state.set_state(CareerTest.question_5)
    await message.answer("üí° –í–æ–ø—Ä–æ—Å 5: –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã?", reply_markup=keyboard_q5)


@router.message(CareerTest.question_5)
async def answer_q5(message: types.Message, state: FSMContext):
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ": await start_test(message, state); return
    await state.update_data(q5=message.text)
    await state.set_state(CareerTest.question_6)
    await message.answer("üí° –í–æ–ø—Ä–æ—Å 6: –ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã?", reply_markup=keyboard_q6)


@router.message(CareerTest.question_6)
async def answer_q6(message: types.Message, state: FSMContext):
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ": await start_test(message, state); return
    await state.update_data(q6=message.text)
    await state.set_state(CareerTest.question_7)
    await message.answer("üí° –í–æ–ø—Ä–æ—Å 7: –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—ã –≥–æ—Ç–æ–≤ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –≤ –¥–µ–Ω—å?", reply_markup=keyboard_q7)


@router.message(CareerTest.question_7)
async def answer_q7(message: types.Message, state: FSMContext):
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ": await start_test(message, state); return
    await state.update_data(q7=message.text)
    await state.set_state(CareerTest.question_8)
    await message.answer("üí° –í–æ–ø—Ä–æ—Å 8: –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç –≤ IT?", reply_markup=keyboard_q8)


@router.message(CareerTest.question_8)
async def answer_q8(message: types.Message, state: FSMContext):
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ": await start_test(message, state); return
    await state.update_data(q8=message.text)
    await state.set_state(CareerTest.question_9)
    await message.answer("üí° –í–æ–ø—Ä–æ—Å 9: –ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?", reply_markup=keyboard_q9)


@router.message(CareerTest.question_9)
async def answer_q9(message: types.Message, state: FSMContext):
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ": await start_test(message, state); return
    await state.update_data(q9=message.text)
    await state.set_state(CareerTest.question_10)
    await message.answer("üí° –í–æ–ø—Ä–æ—Å 10: –ì–¥–µ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Ä–∞–±–æ—Ç–∞—Ç—å?", reply_markup=keyboard_q10)


@router.message(CareerTest.question_10)
async def answer_q10(message: types.Message, state: FSMContext):
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ": await start_test(message, state); return
    await state.update_data(q10=message.text)
    await state.set_state(CareerTest.question_11)
    await message.answer("üí° –í–æ–ø—Ä–æ—Å 11: –° –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Ç–µ–±–µ –±—ã —Ö–æ—Ç–µ–ª–æ—Å—å —Å—Ç–∞–ª–∫–∏–≤–∞—Ç—å—Å—è?", reply_markup=keyboard_q11)


@router.message(CareerTest.question_11)
async def answer_q11(message: types.Message, state: FSMContext):
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ": await start_test(message, state); return
    await state.update_data(q11=message.text)
    await state.set_state(CareerTest.question_12)
    await message.answer("üí° –í–æ–ø—Ä–æ—Å 12: –ö–∞–∫–æ–π —Å—Ç–∏–ª—å —Ä–∞–±–æ—Ç—ã —Ç–µ–±–µ –±–ª–∏–∂–µ?", reply_markup=keyboard_q12)


@router.message(CareerTest.question_12)
async def answer_q12(message: types.Message, state: FSMContext):
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ": await start_test(message, state); return
    await state.update_data(q12=message.text)
    user_data = await state.get_data()

    specialty, description = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ", "–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑!"

    if user_data["q4"] == "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ":
        if user_data["q6"] == "JavaScript" and user_data["q5"] == "React, Vue.js":
            if user_data["q8"] in ["–ù–µ—Ç, —è –Ω–æ–≤–∏—á–æ–∫", "–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è (–∫—É—Ä—Å—ã)"] and user_data["q3"] == "–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞":
                specialty = "Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (Junior)"
                description = "–°–æ–∑–¥–∞—ë—à—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å–∞–π—Ç–æ–≤, –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã."
            elif user_data["q8"] in ["–ï—Å—Ç—å –æ–ø—ã—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "–†–∞–±–æ—Ç–∞–ª –≤ IT"] and user_data["q2"] in ["26‚Äì35", "36+"]:
                specialty = "Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (Middle)"
                description = "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å React –∏–ª–∏ Vue.js."
        elif user_data["q6"] == "Python" and user_data["q5"] == "Python, Django":
            if user_data["q8"] == "–ù–µ—Ç, —è –Ω–æ–≤–∏—á–æ–∫" and user_data["q2"] == "18‚Äì25":
                specialty = "Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (Junior)"
                description = "–ú–æ–ª–æ–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –ø–∏—à–µ—à—å —Å–∫—Ä–∏–ø—Ç—ã –∏ —É—á–∏—à—å—Å—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
            elif user_data["q8"] == "–ï—Å—Ç—å –æ–ø—ã—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è" and user_data["q3"] == "–í—ã—Å–æ–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã":
                specialty = "Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (Middle)"
                description = "–°–æ–∑–¥–∞—ë—à—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤—ã—Å–æ–∫–æ–π –æ–ø–ª–∞—Ç–æ–π."
    elif user_data["q4"] == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö" and user_data["q11"] == "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö":
        if user_data["q6"] == "Python" and user_data["q7"] in ["3‚Äì5 —á–∞—Å–æ–≤", "–ë–æ–ª—å—à–µ 5 —á–∞—Å–æ–≤"] and user_data["q2"] == "–î–æ 18":
            specialty = "–ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö (Junior)"
            description = "–ù–∞—á–∏–Ω–∞–µ—à—å –∫–∞—Ä—å–µ—Ä—É –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ, —Ä–∞–±–æ—Ç–∞—è —Å –¥–∞–Ω–Ω—ã–º–∏."
        elif user_data["q8"] == "–†–∞–±–æ—Ç–∞–ª –≤ IT" and user_data["q3"] == "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–æ—Å—Ç–∞":
            specialty = "Data Scientist (Middle)"
            description = "–°—Ç—Ä–æ–∏—à—å –º–æ–¥–µ–ª–∏ ML —Å –±–æ–ª—å—à–∏–º–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞–º–∏."
    elif user_data["q4"] == "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å" and user_data["q11"] == "–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏":
        if user_data["q8"] == "–ù–µ—Ç, —è –Ω–æ–≤–∏—á–æ–∫" and user_data["q3"] == "–ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º":
            specialty = "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (Junior)"
            description = "–ò—Å—Å–ª–µ–¥—É–µ—à—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö."
        elif user_data["q8"] == "–ï—Å—Ç—å –æ–ø—ã—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è" and user_data["q9"] != "–ù–µ –∑–Ω–∞—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π":
            specialty = "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (Middle)"
            description = "–†–∞–±–æ—Ç–∞–µ—à—å —Å —Å–µ—Ç—è–º–∏ –∏ —Å–ª–æ–∂–Ω—ã–º–∏ —É–≥—Ä–æ–∑–∞–º–∏."
    elif user_data["q4"] == "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ (UI)" and user_data["q11"] == "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ UI":
        if user_data["q2"] in ["–î–æ 18", "18‚Äì25"] and user_data["q3"] == "–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞":
            specialty = "UX/UI-–¥–∏–∑–∞–π–Ω–µ—Ä (Junior)"
            description = "–°–æ–∑–¥–∞—ë—à—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, —Ä–∞–±–æ—Ç–∞–π —É–¥–∞–ª—ë–Ω–Ω–æ!"
    elif user_data["q4"] == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ DevOps" and user_data["q5"] == "Docker, Kubernetes":
        if user_data["q8"] in ["–ù–µ—Ç, —è –Ω–æ–≤–∏—á–æ–∫", "–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è (–∫—É—Ä—Å—ã)"] and user_data["q7"] == "1‚Äì3 —á–∞—Å–∞":
            specialty = "DevOps Engineer (Junior)"
            description = "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—à—å –ø—Ä–æ—Ü–µ—Å—Å—ã —Å Docker –∏ Kubernetes."
        elif user_data["q8"] == "–†–∞–±–æ—Ç–∞–ª –≤ IT" and user_data["q3"] == "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–æ—Å—Ç–∞":
            specialty = "DevOps Engineer (Middle)"
            description = "–£–ø—Ä–∞–≤–ª—è–µ—à—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Å –±–æ–ª—å—à–∏–º–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞–º–∏."
    elif user_data["q4"] == "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞" and user_data["q5"] == "Flutter, Swift":
        if user_data["q6"] == "Java" and user_data["q8"] == "–ù–µ—Ç, —è –Ω–æ–≤–∏—á–æ–∫":
            specialty = "Mobile Developer (Junior)"
            description = "–°–æ–∑–¥–∞—ë—à—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Android –Ω–∞ Java."
        elif user_data["q8"] == "–ï—Å—Ç—å –æ–ø—ã—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è" and user_data["q3"] == "–ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º":
            specialty = "Mobile Developer (Middle)"
            description = "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Flutter –∏–ª–∏ Swift."

    resource = await get_course_resource(specialty)

    db.save_user(message.from_user.id, user_data["q1"], user_data, specialty)

    likes, dislikes = db.get_stats()

    feedback_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëç –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", callback_data="feedback_like")],
        [InlineKeyboardButton(text="üëé –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", callback_data="feedback_dislike")]
    ])

    await message.answer(
        f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞, {user_data['q1']}!**\n\n"
        f"1. –í–æ–∑—Ä–∞—Å—Ç: {user_data['q2']}\n2. –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {user_data['q3']}\n3. –°—Ñ–µ—Ä–∞: {user_data['q4']}\n"
        f"4. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {user_data['q5']}\n5. –Ø–∑—ã–∫–∏: {user_data['q6']}\n6. –í—Ä–µ–º—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ: {user_data['q7']}\n"
        f"7. –û–ø—ã—Ç: {user_data['q8']}\n8. –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: {user_data['q9']}\n9. –ì–¥–µ —Ä–∞–±–æ—Ç–∞—Ç—å: {user_data['q10']}\n"
        f"10. –ó–∞–¥–∞—á–∏: {user_data['q11']}\n11. –°—Ç–∏–ª—å —Ä–∞–±–æ—Ç—ã: {user_data['q12']}\n\n"
        f"üéØ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:** {specialty}\n"
        f"‚ÑπÔ∏è {description}\n"
        f"üîó –ö—É—Ä—Å: {resource}\n\n"
        f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: üëç: {likes} | üëé: {dislikes}\n\n"
        f"–û—Ü–µ–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
        reply_markup=feedback_keyboard
    )
    await state.clear()


@router.callback_query(lambda c: c.data in ["feedback_like", "feedback_dislike"])
async def process_feedback(callback: types.CallbackQuery):
    feedback = 1 if callback.data == "feedback_like" else -1
    db.update_feedback(callback.from_user.id, feedback)
    likes, dislikes = db.get_stats()
    await callback.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ üëç! –†–∞–¥, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ç–µ—Å—Ç!" if feedback == 1 else "–ñ–∞–ª—å, —á—Ç–æ üëé. –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑!",
        show_alert=True
    )
    await callback.message.edit_text(
        f"{callback.message.text.split('üìà')[0]}"
        f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: üëç: {likes} | üëé: {dislikes}",
        reply_markup=None
    )


@router.message(Command("my_results"))
async def show_results(message: types.Message):
    user = db.get_user(message.from_user.id)
    if user:
        name, answers_json, specialty = user
        answers = json.loads(answers_json)
        await message.answer(
            f"üìä **–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, {name}!**\n\n"
            f"1. –í–æ–∑—Ä–∞—Å—Ç: {answers['q2']}\n2. –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {answers['q3']}\n3. –°—Ñ–µ—Ä–∞: {answers['q4']}\n"
            f"4. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {answers['q5']}\n5. –Ø–∑—ã–∫–∏: {answers['q6']}\n6. –í—Ä–µ–º—è: {answers['q7']}\n"
            f"7. –û–ø—ã—Ç: {answers['q8']}\n8. –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: {answers['q9']}\n9. –ì–¥–µ —Ä–∞–±–æ—Ç–∞—Ç—å: {answers['q10']}\n"
            f"10. –ó–∞–¥–∞—á–∏: {answers['q11']}\n11. –°—Ç–∏–ª—å: {answers['q12']}\n\n"
            f"üéØ **–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:** {specialty}"
        )
    else:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç! –ù–∞—á–Ω–∏ —Å /test")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())